include(${CMAKE_CURRENT_LIST_DIR}/blobs.cmake)

# FIXME: implement uni_set_implicit_links (LibUni as a LibC :^))
#        (see https://github.com/SerenityOS/serenity/blob/master/Meta/CMake/utils.cmake#L5)

function(uni_install_headers target_name)
  file(GLOB_RECURSE headers RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${HEADER_BLOB})
  foreach(header ${headers})
    get_filename_component(subdirectory ${header} DIRECTORY)
    install(FILES ${header} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${target_name}/${subdirectory}" OPTIONAL)
  endforeach()
endfunction()

function(uni_install_sources)
  # TODO: Use cmake_path() when we upgrade the minimum CMake version to 3.20
  #       https://cmake.org/cmake/help/v3.23/command/cmake_path.html#relative-path
  string(LENGTH ${Uni_SOURCE_DIR} root_source_dir_length)
  string(SUBSTRING ${CMAKE_CURRENT_SOURCE_DIR} ${root_source_dir_length} -1 current_source_dir_relative)
  file(GLOB_RECURSE sources RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${HEADER_BLOB} ${SOURCE_BLOB})
  foreach(source ${sources})
    get_filename_component(subdirectory ${source} DIRECTORY)
    install(FILES ${source} DESTINATION lib/${current_source_dir_relative}/${subdirectory} OPTIONAL)
  endforeach()
endfunction()

function(uni_generated_sources target_name)
  if(DEFINED GENERATED_SOURCES)
    set_source_files_properties(${GENERATED_SOURCES} PROPERTIES GENERATED 1)
    foreach(generated ${GENERATED_SOURCES})
      get_filename_component(generated_name ${generated} NAME)
      add_dependencies(${target_name} generate_${generated_name})
      add_dependencies(all_generated generate_${generated_name})
    endforeach()
  endif()
endfunction()

if (NOT COMMAND uni_lib)
  function(uni_lib target_name fs_name)
    uni_install_headers(${target_name})
    uni_install_sources()
    add_library(${target_name} SHARED ${SOURCES} ${GENERATED_SOURCES})
    set_target_properties(${target_name} PROPERTIES EXCLUDE_FROM_ALL TRUE)
    set_target_properties(${target_name} PROPERTIES VERSION "uni")
    install(TARGETS ${target_name} DESTINATION ${CMAKE_INSTALL_LIBDIR} OPTIONAL)
    set_target_properties(${target_name} PROPERTIES OUTPUT_NAME ${fs_name})
    uni_generated_sources(${target_name})
  endfunction()
endif()

if (NOT COMMAND uni_lib_static)
  function(uni_lib_static target_name fs_name)
    uni_install_headers(${target_name})
    uni_install_sources()
    add_library(${target_name} STATIC ${SOURCES} ${GENERATED_SOURCES})
    set_target_properties(${target_name} PROPERTIES EXCLUDE_FROM_ALL TRUE)
    set_target_properties(${target_name} PROPERTIES VERSION "uni")
    install(TARGETS ${target_name} DESTINATION ${CMAKE_INSTALL_LIBDIR} OPTIONAL)
    set_target_properties(${target_name} PROPERTIES OUTPUT_NAME ${fs_name})
    uni_generated_sources(${target_name})
  endfunction()
endif()

if (NOT COMMAND uni_bin)
  function(uni_bin target_name)
    uni_install_sources()
    add_executable(${target_name} ${SOURCES})
    set_target_properties(${target_name} PROPERTIES EXCLUDE_FROM_ALL TRUE)
    install(TARGETS ${target_name} RUNTIME DESTINATION bin OPTIONAL)
    uni_generated_sources(${target_name})
  endfunction()
endif()

if (NOT COMMAND uni_latex)
  function(uni_latex target_name)
    list(APPEND UNI_LATEX_COMMAND ${SOURCES})

    if (DEFINED BIBLATEX_FILES)
      list(APPEND UNI_LATEX_COMMAND BIBFILES ${BIBLATEX_FILES} USE_BIBLATEX)
    endif()

    if (DEFINED IMAGE_DIRS)
      list(APPEND UNI_LATEX_COMMAND IMAGE_DIRS ${IMAGE_DIRS})
    endif()

    add_latex_document(${UNI_LATEX_COMMAND})
  endfunction()
endif()
